[
  {
    "objectID": "getting_started.html#r-and-rstudio",
    "href": "getting_started.html#r-and-rstudio",
    "title": "\n2  Getting Started\n",
    "section": "\n2.1 R and RStudio",
    "text": "2.1 R and RStudio\nR is a programming language that is particularly suited for statistical computing and graphics. It is freely available under GNU General Public licence for Windows, Linux and Mac operating systems, and is supported by a huge community of users and developers. You can read more on its interesting story here.\nOne of the advantages of R is that it is historically the lingua franca of statistics, and is used by statisticians and data scientists worldwide; this means that it is often the first language used to implement new econometric methods and statistical models. In addition, its large user base means that it is very easy to find help and support on the web.\nR is a modular language, and its functionality can be extended by installing specific packages (libraries) for a wide range of applications including econometrics, finance, machine learning, data visualization, and many more. There are currently over 15,000 packages available on the Comprehensive R Archive Network (CRAN).\nRStudio is an integrated development environment (IDE) for R. It is highly customizable and includes a console, syntax-highlighting editor that supports direct code execution, as well as tools for plotting, history, debugging and workspace management. While it is theoretically not necessary to use RStudio to run R code, it is highly recommended as it makes the coding experience immensely more pleasant and efficient.\nTo be able to manipulate the codes on this platform on your own machine, you first need to download and install R and RStudio (in this order). If necessary you can find detailed instructions on how to do this here."
  },
  {
    "objectID": "getting_started.html#learning-resources",
    "href": "getting_started.html#learning-resources",
    "title": "\n2  Getting Started\n",
    "section": "\n2.2 Learning Resources",
    "text": "2.2 Learning Resources\nBecause the R programming language is so versatile, there are often many ways to achieve something. This is especially true when you consider that for many applications there exist multiple competing packages, each with its strengths and weaknesses. Luckily, there is a large community of users and developers that are happy to share their knowledge and experience, and a plethora of great learning resources are available for free on the web.\nWhenever you are having issues in your R programming, remember that chances are many users experienced the same problem before you, and that you can find the solution by searching on the web. No matter how experienced you are, you will always need to look up the documentation of a function or package, or search for a solution to a specific problem. Nobody remembers the exact syntax of all functions and packages: there is no shame in this and accessing documentation and/or looking up resources online is (possibly the most important) part of the learning process.\nHere are some useful resources I find myself constantly accessing and referring to while programming in R:\n\n\nOnline Tutorials Many learning tutorials are freely available on the web, for example\n\nRStudio Education\nW3Schools R Tutorial\n\nSwirl is an R package that teaches you R programming and data science functions, right inside the R console!\n\n\n\n\n\nCheat Sheets: RStudio developer Posit publishes a multitude of cheat sheets for the most commonly used functions in R as well as in a variety of packages.\nIn particular, among them:\n\nRStudio IDE Cheatsheet\nThe Base R Cheatsheet\n\ndplyr Cheatsheet for data transformation and manipulation\n\nggplot2 Cheatsheet for data visualization\n\n\n\n\n\nOnline Communities\n\n\nStack Overflow is a question and answer site for professional and enthusiast programmers. It is a great place to find answers to your questions. If you are new to the platform, you can find some useful tips on how to ask questions here. But in truth, 99.99% of the times just doing a search on the site will lead you to a question that has already been asked and answered.\n\nRStudio Community is a forum for RStudio users. It is a great place to find answers to your questions. If you are new to the platform, you can find some useful tips on how to ask questions here.\n\nEconometrics Stack Exchange is a question and answer site for those who study, teach, research and apply economics and econometrics.\n\nR-bloggers is a blog aggregator for content contributed by bloggers who write about R. It is a great place to find tutorials and examples of R code.\n\n\n\n\n\nOnline Books:\n\n\nR for Data Science by Wickham, Çetinkaya-Rundel, and Grolemund (2023):\nThis is possibly the best resources for learning R programming for data analysis applications. Hadley Wickham is one of the most influential R developers in the world and his tidyverse packages have truly re-shaped the syntax of the language.\n\nHands-On Programming with R by Grolemund (2014)."
  },
  {
    "objectID": "getting_started.html#r-basics",
    "href": "getting_started.html#r-basics",
    "title": "\n2  Getting Started\n",
    "section": "\n2.3 R Basics",
    "text": "2.3 R Basics\n\n2.3.1 R as a calculator\nThe most basic use of R is a calculator. You can input formulas in the console tab of RStudio and execute them by pressing Enter. The consele is an interactive environment where you can input your code and have the results displayed.\nFor example, try typing 2+2 and pressing Enter. You should see the result 4 printed in the console.\n\n2+2\n\n[1] 4\n\n\nThe usual arithmetic operators are available in R:\n\n\n+ for addition\n\n- for subtraction\n\n* for multiplication\n\n/ for division\n\n^ for exponentiation\n\n%% for modulo (remainder of division).\n\nOf course, you can also use parentheses to group operations.\n\n2*(100/4)+(2^3)\n\n[1] 58\n\n\nYou can also assign values to variables and use them later in your calculations. In R we use the assignment operator &lt;- to assign values to variables. For example, typing x &lt;- 2 creates a variable x and assigns a value of 2 and pressing Enter. You should see nothing printed in the console; however, in the Environment tab of RStudio you should see the variable x has been created and now carries the value of 2.\n\nx &lt;- 2\n\nYou can confirm this by typing x in the console and pressing Enter. You should see the value of x printed in the console.\n\nx\n\n[1] 2\n\n\n\n2.3.2 Working with R scripts\nWhile working in the console is great for performing quick calculations and testing out code, in general you will want to save your code in a file to be able to execute it again later, revise it and/or extend it. For this purpose, we use R scripts. An R script is simply a text file containing R code, and you can create a new R script by clicking on the File menu and selecting New File and then R Script. Alternatively, you can use the keyboard shortcut Ctrl + Shift + N on a Windows computer or Cmd + Shift + N on a Mac.\nAs you see you now have an untitled.R file open in a pane of RStudio, and you can now type your code in it and execute it (line by line or selecting a chunk) by pressing Ctrl + Enter on a Windows computer or Cmd + Enter on a Mac.\nNote that you can also execute the entire script by clicking on the Source button in the top right corner of the script pane. This will execute the entire script, line by line, and print the results in the console. In the File menu you will find the usual options to save or rename your R script.\n\n\n\n\n\n\nComments #\n\n\n\nIn R every line that starts with a # is a comment and is not executed. Comments are useful to explain what your code does and make it more readable. It is very good practice to comment your code, either to make it more accessible to other users or to remind your future self what you were doing.\nYou can also “comment out” a line of code when you want to test something without deleting the original code. To do this, simply add a # at the beginning of the line of code you want to comment out. This way, the line will not be executed, but it will still be there for you to use later.\n\n\nYou can copy these snippets of code into your R script and execute them line by line to see what happens. Try to change the values of the variables and see what happens.\nConsider the usual identity for Gross Domestic Product (GDP):\n\\[GDP=C+I+G+NX\\] where \\[NX=EX-IM\\] We can now use R to calculate GDP for different values of consumption, investment, government spending, exports and imports.\n\n#########################   YOUR FIRST R SCRIPT  #############################\n# Note: lines start with a # are not executed\n# Also, any part of a line following a # is not executed\n\n# Defining known variables\nC &lt;- 18888.1   # Consumption\nI &lt;- 4975.0    # Investment\nG &lt;- 4856.8    # Government spending\nEX &lt;- 3054.0   # Exports\nIM &lt;- 3835.1   # Imports\n\n# Calculating GDP\nGDP &lt;- C + I + G + (EX - IM)\nGDP\n\n[1] 27938.8\n\n\nWe can similarly compute Net Exports (NX) and save the value to a newly created variable:\n\nNX &lt;- EX - IM\nNX\n\n[1] -781.1\n\n\n\n2.3.3 Built-in functions\nIn economics, we often want to convert a variable to its natural logarithm. Even before installing any additional package, base R has many built-in mathematical functions, including the natural logarithm is computed using the log() function. For example, to compute the natural logarithm of GDP and assign the value to a new variable lnGDP we can type:\n\nlnGDP &lt;- log(GDP)\nlnGDP\n\n[1] 10.23777\n\n\nAmong the many useful functions built-in base R we have:\n\n\nmax and min, to find the maximum and minimum of a set of numbers\n\nexp(), the exponential function\n\nsqrt(), the square root\n\nabs(), the absolute value\n\nlog10() and log2(), respectively the logarithm to base 10 and 2\n\ncos(), sin(), tan(), acos(), asin(), atan(), the trigonometric functions and their inverses\n\nSometimes you might not remember the arguments that a function requires, or some detail about its mechanics. In such cases you can type (in the console or in a script) help(function_name) or ?function_name and press Enter. This will open the help page for the function in the Help tab of RStudio, which will include a description of the function, its arguments, references and some practical examples of usage.\nFor example, we you can type ?log and press Enter to see the help page for the log() function.\n\n?log\n\nAs you can see in the Usage section og the help page, log() takes two arguments: x and base. The x argument is the number for which you want to compute the logarithm, and the base argument is the base of the logarithm. The expression base = exp(1) means that if no base argument is specified by default exp(1) is used as base (i.e. the natural logarithm is computed). It is quite common for functions to have one or a few required arguments and many optional arguments for which a default value may be pre-specified if you do not explicitly state a different one.\nUntil now, we have printed the value of a variable by simply typing its name. However, we can also use the print() function to print the value of a variable. For example, to print the value of lnGDP we can type:\n\nprint(lnGDP)\n\n[1] 10.23777\n\n\nThe print() function allows us to do more complicated things, for example to print a message along with the value of a variable. Let’s say that we want to print the message “The natural logarithm of GDP is:” followed by the value of lnGDP, so that the user can better understand what the value refers to, we can type:\n\nprint(paste(\"The natural logarithm of GDP is:\", lnGDP))\n\n[1] \"The natural logarithm of GDP is: 10.2377716827118\"\n\n\npaste is another built-in function that allows us to concatenate strings of text. In the example above we first concatenated the string “The natural logarithm of GDP is:” with the value of the variable lnGDP to create a single string. Then, the function print() printed this concatenated string in the console.\n\n\n\n\n\n\nSingle and double quotes\n\n\n\nDifferently from other programming languages, in R you can use either single quotes ' or double quotes \" interchangeably to define a string of text. In other words print(\"Hello\") and print('Hello') are equivalent.\nThe R documentation suggests that double quotes are preferred over single quotes, some programmers prefer to use double quotes for character strings and single quotes for other purposes, and can feel quite strongly about these rules. Ultimately, however, this is a matter of personal style and you can choose the one you prefer.\nNo matter your choice, it is important to be consistent in your use of single and double quotes throughout your code, as consistency in style improves readability and intelligibility of your work.\n\n\n\n2.3.4 if statements\nIf statements are use to execute some code only if a certain condition is met. The syntax of the if statement is if (condition) { code to be executed }.\nImagine that we are interested in printing to the console the value of lnGDP only if it is greater than 10. We can use an if statement to do this:\n\nif (lnGDP &gt; 10) {\n  print(paste(\"The natural logarithm of GDP is larger than 10, and more precisely it is:\", lnGDP))\n}\n\n[1] \"The natural logarithm of GDP is larger than 10, and more precisely it is: 10.2377716827118\"\n\n\nWe can also add an else statement to execute some code if the condition is not met. The syntax of the if-else statement is then if (condition) { code to be executed if the condition is met } else { code to be executed if the condition is not met }. To test how this works, let’s change the value of lnGDP to 9 and run the following code:\n\nlnGDP &lt;- 9\n\nif (lnGDP &gt; 10) {\n  print(paste(\"The natural logarithm of GDP is larger than 10, and more precisely it is:\", lnGDP))\n} else {\n  print(paste(\"The natural logarithm of GDP is not larger than 10, and more precisely it is:\", lnGDP))\n}\n\n[1] \"The natural logarithm of GDP is not larger than 10, and more precisely it is: 9\"\n\n\n\n2.3.5 Loops\nIn economics, we often want to solve a model by iterating over a set of equations. For example, consider the following simple Keynesian model:\nRETEST\n\nrm(list=ls())\n\n#Define exogenous parameters\nc0=2\nc1=0.8\nI=10\n\n#set initial values for two endogenous variable\nY=C=1\n#Use a for loop to solve it\n\nfor (i in 1:20){\n  Y &lt;- C+I\n  C &lt;- c0 + c1*Y\n  print(Y)\n  print(C)\n}\n\n[1] 11\n[1] 10.8\n[1] 20.8\n[1] 18.64\n[1] 28.64\n[1] 24.912\n[1] 34.912\n[1] 29.9296\n[1] 39.9296\n[1] 33.94368\n[1] 43.94368\n[1] 37.15494\n[1] 47.15494\n[1] 39.72396\n[1] 49.72396\n[1] 41.77916\n[1] 51.77916\n[1] 43.42333\n[1] 53.42333\n[1] 44.73867\n[1] 54.73867\n[1] 45.79093\n[1] 55.79093\n[1] 46.63275\n[1] 56.63275\n[1] 47.3062\n[1] 57.3062\n[1] 47.84496\n[1] 57.84496\n[1] 48.27597\n[1] 58.27597\n[1] 48.62077\n[1] 58.62077\n[1] 48.89662\n[1] 58.89662\n[1] 49.11729\n[1] 59.11729\n[1] 49.29384\n[1] 59.29384\n[1] 49.43507\n\n\n\n#########################   YOUR FIRST R SCRIPT  #############################\n# Note: these lines start with a # and hence are not executed\n\n# Defining some variables\ns = 0.05\nY = 10\n\n#We can also assign several variables the same value at once\nC = I = R = 2\n\n#For displaying them we simply call the name of the object and execute the relevant line\nY\nC\n\n#We can define new variables using existing ones\nW = Y - R\nW\n\n#R has a vast amount of built in functions, for example\nmax(10,2,100,-3)\nsqrt(9)\nabs(-13)\n\n#you can find out more about these by using the help function, e.g.:?max()\n\n#How can you delete stuff? Use the remove function rm()\n#for individual objects\nrm(Y)\n#if you want to remove everything\nrm(list=ls(all=TRUE))\n\n#You can also assign text (a string) to a variable\ntext1 = 'Reggaeton'\ntext2 = \"Bad Bunny\"\n#note \"text\" is the same as 'text' and a string can contain spaces\n#You use the paste function to combine strings\npaste(text1, text2)\n\n#R uses standard operators like +, -, *\n#for exponents use ^\n3^2\n\n\n########################### if statements and loops ######################\n\n#sometimes we need to introduce if conditions into our code\n#The syntax is\n#if condition { do something }\na = 10\nb = 13\nif (b&gt;a) {\n  print(\"b is bigger\")\n}\n#we can also tell R what to do in case the condition is not fulfilled\nb=10\nif (b&gt;a) {\n  print(\"b is bigger\")\n} else {\n  print(\"b not bigger\")\n}\n\n\n#Next we will look at loops which are a key tool to repeat tasks such as solving\n#a theoretical model again and again to find its equilibrium.\n#The basic structure is:\nfor (i in 1:5){\n  print(i)\n}\n\n#Let's use it to solve a simple Keynesian cross model of the form\n#Y=C+I\n#C=c0+c1Y\n#Define exogenous parameters\nc0=2\nc1=0.8\nI=10\n#set initial values for two endogenous variable\nY=C=1\n#Use a for loop to solve it\nC\nY\nfor (i in 1:100){\n  Y = C+I\n  C = c0+c1*Y\n}\nC\nY\n#solution is Y=(I+c0)/(1-c1)=60\n\n#What is special about this loop is that it uses the values from the previous iteration\n#to define the values of the next, because it starts with assigning a value to Y\n#and then uses that value to assign a new value to C and in the next iteration it\n#uses this new value for C to define a new value for Y etc.\n\n\n########################### Data structures ##########################\n#In most applications we produce outputs which do not consist of a single number.\n#Often we have an entire stream of results, or we want to analyse data and have to store larger amounts of data\n#R has a variety of data structures for this purpose.\n#let's clean up first\nrm(list=ls(all=TRUE))\n\n####Vectors \n#We can create an empty vector and fill it later (with results of our model for example)\nvec1 = vector(length=3)\n#we can define vectors explicitly using the c() function (c for column?)\nvec2 = c(1,2,3)\nvec3 = c(6,7,8)\n#we can also use the sequence operator\nvec4 = 1:10\n#and we can define the step size\nvec5 = seq(1,2,0.1)\nvec5\n#we can call specific entries using square brackets\nvec5[4]\n#if we want to access more elements at once\nvec5[c(4,1)]\n\n####Matrices\n#define a matrix: 3 rows and 2 columns, all elements equal to 0\nmat1 = matrix(0, nrow=3, ncol=2)\nmat1\n#we can also fill it with specific values\nmat2 = matrix(c(1,2,3,4,5,6), nrow = 3, ncol = 2)\nmat2\n#access specific elements (columns,rows)\nmat2[3,1]\n#access entire rows or columns\nmat2[,1]\nmat2[1,]\n#access sub matrices\nmat2[c(1,2),]\n## Combine two column vectors in a matrix\nmat3=cbind(vec1, vec2)\nmat3\n## Combine two row vectors in a matrix\nmat4=rbind(vec1, vec2)\nmat4\n\n\n\n\n\nGrolemund, Garrett. 2014. Hands-on Programming with r. O’Reilly Media, Inc. https://rstudio-education.github.io/hopr/.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. 2nd ed. O’Reilly Media, Inc. https://r4ds.had.co.nz/."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "\n1  Introduction\n",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n1 + 1\n\n[1] 2\n\n\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Grolemund, Garrett. 2014. Hands-on Programming with r. O’Reilly\nMedia, Inc. https://rstudio-education.github.io/hopr/.\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023.\nR for Data Science. 2nd ed. O’Reilly Media, Inc. https://r4ds.had.co.nz/."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Macroeconomics with R",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.\n\n1 + 1\n\n[1] 2"
  }
]