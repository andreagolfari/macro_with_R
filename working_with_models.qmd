## More advanced programming in R

### `if` statements

If statements are use to execute some code only if a certain condition is met. The syntax of the if statement is `if (condition) { code to be executed }`.

Imagine that we are interested in printing to the console the value of `lnGDP` only if it is greater than 10. We can use an if statement to do this:

```{r}
lnGDP <- 11

if (lnGDP > 10) {
    print(paste("The natural logarithm of GDP is larger than 10, and more precisely it is:", lnGDP))
}
```

We can also add an `else` statement to execute some code if the condition is **not** met. The syntax of the if-else statement is then `if (condition) { code to be executed if the condition is met } else { code to be executed if the condition is not met }`. To test how this works, let's change the value of `lnGDP` to 9 and run the following code:

```{r}
lnGDP <- 9

if (lnGDP > 10) {
  print(paste("The natural logarithm of GDP is larger than 10, and more precisely it is:", lnGDP))
} else {
  print(paste("The natural logarithm of GDP is not larger than 10, and more precisely it is:", lnGDP))
}
```

### Loops

In economics, we often want to solve a model by iterating over a set of equations. For example, consider the following simple Keynesian model:

$$Y = C+I$$ and $$C = \delta_{0} + \delta_{1} \times Y$$ We will need to define the exogenous parameters $\delta_{0}$, $\delta_{1}$, and $I$, as well as an initial values for the endogenous variable $C$. Then, we can use a loop to solve the model iterating over the equations until the endogenous variable converges to a stable value.

```{r}
# Define exogenous parameters
delta <- 5
delta_1 <- 0.75
I <-  10

# Set an initial values for the endogenous variable C
C <- 1

# Use a for loop to solve the model

for (i in 1:60){
  Y <- C + I
  C <- delta + delta_1*Y
  cat("Iteration", i, ":", "Y =", Y, "C =", C, "\n")
  }
```

Note that we used the `cat()` function to print the results of each iteration in the console. The `cat()` function is similar to the `print()` function, but it is useful when you want to print several things in the same line. Here, at each iteration of the for loop we printed the string `"Iteration"`, the value of the variable `i`, the string `":"`, the string `"Y ="` the value of `Y`, the string `"C ="`, and the value of `C`, followed by the string `\n` instructing `R` to move to a new line.

In the previous example we printed the result of each iteration to the console; this was useful to observe what the loop was doing and to check if the endogenous variable was converging to a stable value. However, in many cases you might only be interested in obtaining the final results.

We ca easily achieve this moving the `cat()` function outside the loop, so that it is executed only once, after the loop has finished. For example, we can modify the previous code as follows:

```{r}
# Define exogenous parameters
delta <- 5
delta_1 <- 0.75
I <-  10

# Set an initial values for the endogenous variable C
C <- 1

# Use a for loop to solve the model

for (i in 1:60){
  Y <- C + I
  C <- delta + delta_1*Y
}

cat("Final results: \n", "Y =", Y, "C =", C, "\n")

```

### Variable types

In our previous coding examples we have been defining and using several variables, simply assigning values to them without giving it much thought. If you have not cleared your workspace, you should still be able to see some of them in the `Environment` tab of RStudio: the variable `Y` we used to store the value of investment still holds the value 10, and the variable `C` we used to store the value of consumption still holds the final result of the loop.

You might notice that the variable `i` we used to iterate over the loop is still there as well, but its value is reported as `60L`. We never explicitly defined `i` using an assignment operator `<-`: `i` is a special type of variable called a `loop variable`. Loop variables are automatically created by R to store the value of the current iteration of the loop (i.e. act as a counter) and since R knows that all they will do is count the iteration they are automatically assigned the type of `integer`; after all, we know there will be a first iteration of the loop and a second iteration of the loop, but no 1.5-th iteration of the loop.

We can explicitly check the type of a variable using the `class()` or `typeof()` functions. Let's see what R answer when we ask about the types of the variables `I` and `i`:

```{{r}}
class(i)
class(I)
```

As expected, `i` is of type `integer` and `I` is of type `numeric`.

In R, variables can be of different types. The most common types are:

```         
- **Numeric**: for real numbers
```

-   **Integer**: for integer numbers
-   **Character**: for strings of text
-   **Logical**: for logical values (TRUE or FALSE)

When we define a variable, R automatically assigns a type to it. For example, when we defined the variable `lnGDP` as `lnGDP <- log(1000)`, R assigned the type `numeric` to `lnGDP` because the value of `log(1000)` is a real number.

```{r}

########################### Data structures ##########################
#In most applications we produce outputs which do not consist of a single number.
#Often we have an entire stream of results, or we want to analyse data and have to store larger amounts of data
#R has a variety of data structures for this purpose.
#let's clean up first
rm(list=ls(all=TRUE))

####Vectors 
#We can create an empty vector and fill it later (with results of our model for example)
vec1 = vector(length=3)
#we can define vectors explicitly using the c() function (c for column?)
vec2 = c(1,2,3)
vec3 = c(6,7,8)
#we can also use the sequence operator
vec4 = 1:10
#and we can define the step size
vec5 = seq(1,2,0.1)
vec5
#we can call specific entries using square brackets
vec5[4]
#if we want to access more elements at once
vec5[c(4,1)]

####Matrices
#define a matrix: 3 rows and 2 columns, all elements equal to 0
mat1 = matrix(0, nrow=3, ncol=2)
mat1
#we can also fill it with specific values
mat2 = matrix(c(1,2,3,4,5,6), nrow = 3, ncol = 2)
mat2
#access specific elements (columns,rows)
mat2[3,1]
#access entire rows or columns
mat2[,1]
mat2[1,]
#access sub matrices
mat2[c(1,2),]
## Combine two column vectors in a matrix
mat3=cbind(vec1, vec2)
mat3
## Combine two row vectors in a matrix
mat4=rbind(vec1, vec2)
mat4
```
