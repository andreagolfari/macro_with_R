---
title: "Getting Started"
author: "Andrea Golfari"
format: 
    html:
        theme:
            dark: darkly
editor: visual
---

## R and RStudio

R is a programming language that is particularly suited for statistical computing and graphics. It is freely available under GNU General Public licence for Windows, Linux and Mac operating systems, and is supported by a huge community of users and developers. You can read more on its interesting story [here](https://www.r-project.org/about.html).

One of the advantages of R is that it is historically the *lingua franca* of statistics, and is used by statisticians and data scientists worldwide; this means that it is often the first language used to implement new econometric methods and statistical models. In addition, its large user base means that it is very easy to find help and support on the web.

R is a modular language, and its functionality can be extended by installing specific packages (libraries) for a wide range of applications including econometrics, finance, machine learning, data visualization, and many more. There are currently over 15,000 packages available on the [Comprehensive R Archive Network (CRAN)](https://cran.r-project.org/).

RStudio is an integrated development environment (IDE) for R. It is highly customizable and includes a console, syntax-highlighting editor that supports direct code execution, as well as tools for plotting, history, debugging and workspace management. While it is theoretically not necessary to use RStudio to run R code, it is highly recommended as it makes the coding experience immensely more pleasant and efficient.

To be able to manipulate the codes on this platform on your own machine, you first need to download and install [R](https://cran.r-project.org/) and [RStudio](https://posit.co/products/open-source/rstudio/) (in this order). If necessary you can find detailed instructions on how to do this [here](https://rstudio-education.github.io/hopr/starting.html).

## Learning Resources

Because the R programming language is so versatile, there are often many ways to achieve something. This is especially true when you consider that for many applications there exist multiple competing packages, each with its strengths and weaknesses. Luckily, there is a large community of users and developers that are happy to share their knowledge and experience, and a plethora of great learning resources are available for free on the web.

Whenever you are having issues in your R programming, remember that chances are many users experienced the same problem before you, and that you can find the solution by searching on the web. No matter how experienced you are, you will always need to look up the documentation of a function or package, or search for a solution to a specific problem. Nobody remembers the exact syntax of *all* functions and packages: there is no shame in this and accessing documentation and/or looking up resources online is (possibly the most important) part of the learning process.

Here are some useful resources I find myself constantly accessing and referring to while programming in R:

-   **Online Tutorials** Many learning tutorials are freely available on the web, for example
    1.  [RStudio Education](https://education.rstudio.com/learn/beginner/)
    2.  [W3Schools R Tutorial](https://www.w3schools.com/r/default.asp)
    3.  [Swirl](https://swirlstats.com/) is an R package that teaches you R programming and data science functions, right inside the R console!

\vspace{2em}

-   **Cheat Sheets:** RStudio developer Posit publishes a [multitude of cheat sheets](https://posit.co/resources/cheatsheets/) for the most commonly used functions in R as well as in a variety of packages.\
    In particular, among them:
    1.  [**RStudio IDE Cheatsheet**](https://rstudio.github.io/cheatsheets/html/rstudio-ide.html)
    2.  [**The Base R Cheatsheet**](https://rstudio.github.io/cheatsheets/base-r.pdf)
    3.  [**dplyr Cheatsheet**](https://rstudio.github.io/cheatsheets/data-transformation.pdf) for data transformation and manipulation
    4.  [**ggplot2 Cheatsheet**](https://rstudio.github.io/cheatsheets/base-r.pdf) for data visualization

\vspace{2em}

-   **Online Communities**
    1.  [**Stack Overflow**](https://stackoverflow.com/) is a question and answer site for professional and enthusiast programmers. It is a great place to find answers to your questions. If you are new to the platform, you can find some useful tips on how to ask questions [here](https://stackoverflow.com/help/how-to-ask). But in truth, 99.99% of the times just doing a search on the site will lead you to a question that has already been asked and answered.
    2.  [**RStudio Community**](https://community.rstudio.com/) is a forum for RStudio users. It is a great place to find answers to your questions. If you are new to the platform, you can find some useful tips on how to ask questions [here](https://community.rstudio.com/t/faq-how-to-do-reproducible-minimal-examples/1060).
    3.  [**Econometrics Stack Exchange**](https://economics.stackexchange.com/) is a question and answer site for those who study, teach, research and apply economics and econometrics.
    4.  [**R-bloggers**](https://www.r-bloggers.com/) is a blog aggregator for content contributed by bloggers who write about R. It is a great place to find tutorials and examples of R code.

\vspace{2em}

-   **Online Books:**
    1.  [**R for Data Science**](https://r4ds.had.co.nz/) by @wickham2023:\
        This is possibly the best resources for learning R programming for data analysis applications. Hadley Wickham is one of the most influential R developers in the world and his tidyverse packages have truly re-shaped the syntax of the language.
    2.  [**Hands-On Programming with R**](https://rstudio-education.github.io/hopr/) by @grolemund.

## R Basics

### R as a calculator

The most basic use of R is a calculator. You can input formulas in the `console` tab of RStudio and execute them by pressing `Enter`. The consele is an interactive environment where you can input your code and have the results displayed.

For example, try typing `2+2` and pressing `Enter`. You should see the result `4` printed in the console.

```{r}
2+2
```

The usual arithmetic operators are available in R:

-   `+` for addition
-   `-` for subtraction
-   `*` for multiplication
-   `/` for division
-   `^` for exponentiation
-   `%%` for modulo (remainder of division).

Of course, you can also use parentheses to group operations.

```{r}
2*(100/4)+(2^3)
```

You can also assign values to variables and use them later in your calculations. In R we use the *assignment operator* `<-` to assign values to variables. For example, typing `x <- 2` creates a variable `x` and assigns a value of 2 and pressing `Enter`. You should see nothing printed in the console; however, in the `Environment` tab of RStudio you should see the variable `x` has been created and now carries the value of 2.

```{r}
x <- 2
```

You can confirm this by typing `x` in the console and pressing `Enter`. You should see the value of `x` printed in the console.

```{r}
x
```

### Working with R scripts

While working in the console is great for performing quick calculations and testing out code, in general you will want to save your code in a file to be able to execute it again later, revise it and/or extend it. For this purpose, we use R scripts. An R script is simply a text file containing R code, and you can create a new R script by clicking on the `File` menu and selecting `New File` and then `R Script`. Alternatively, you can use the keyboard shortcut `Ctrl + Shift + N` on a Windows computer or `Cmd + Shift + N` on a Mac.

As you see you now have an `untitled.R` file open in a pane of RStudio, and you can now type your code in it and execute it (line by line or selecting a chunk) by pressing `Ctrl + Enter` on a Windows computer or `Cmd + Enter` on a Mac.

Note that you can also execute the entire script by clicking on the `Source` button in the top right corner of the script pane. This will execute the entire script, line by line, and print the results in the console. In the `File` menu you will find the usual options to save or rename your R script.

::: callout-tip
## Comments `#`

In R every line that starts with a `#` is a **comment** and is not executed. Comments are useful to explain what your code does and make it more readable. It is very good practice to comment your code, either to make it more accessible to other users or to remind your future self what you were doing.

You can also "comment out" a line of code when you want to test something without deleting the original code. To do this, simply add a `#` at the beginning of the line of code you want to comment out. This way, the line will not be executed, but it will still be there for you to use later.
:::

You can copy these *snippets* of code into your R script and execute them line by line to see what happens. Try to change the values of the variables and see what happens.

Consider the usual identity for Gross Domestic Product (GDP):

$$GDP=C+I+G+NX$$ where $$NX=EX-IM$$ We can now use R to calculate GDP for different values of consumption, investment, government spending, exports and imports.

```{r}
#########################   YOUR FIRST R SCRIPT  #############################
# Note: lines start with a # are not executed
# Also, any part of a line following a # is not executed

# Defining known variables
C <- 18888.1   # Consumption
I <- 4975.0    # Investment
G <- 4856.8    # Government spending
EX <- 3054.0   # Exports
IM <- 3835.1   # Imports

# Calculating GDP
GDP <- C + I + G + (EX - IM)
GDP
```

We can similarly compute Net Exports (NX) and save the value to a newly created variable:

```{r}
NX <- EX - IM
NX
```

### Built-in functions

In economics, we often want to convert a variable to its natural logarithm. Even before installing any additional package, base R has many built-in mathematical functions, including the natural logarithm is computed using the `log()` function. For example, to compute the natural logarithm of GDP and assign the value to a new variable `lnGDP` we can type:

```{r}
lnGDP <- log(GDP)
lnGDP
```

Among the many useful functions built-in base R we have:

-   `max` and `min`, to find the maximum and minimum of a set of numbers
-   `exp()`, the exponential function
-   `sqrt()`, the square root
-   `abs()`, the absolute value
-   `log10()` and `log2()`, respectively the logarithm to base 10 and 2
-   `cos()`, `sin()`, `tan()`, `acos()`, `asin()`, `atan()`, the trigonometric functions and their inverses

Sometimes you might not remember the arguments that a function requires, or some detail about its mechanics. In such cases you can type (in the console or in a script) `help(function_name)` or `?function_name` and press `Enter`. This will open the help page for the function in the `Help` tab of RStudio, which will include a description of the function, its arguments, references and some practical examples of usage.

For example, we you can type `?log` and press `Enter` to see the help page for the `log()` function.

```{r}
?log
```

As you can see in the `Usage` section og the help page, `log()` takes two arguments: `x` and `base`. The `x` argument is the number for which you want to compute the logarithm, and the `base` argument is the base of the logarithm. The expression `base = exp(1)` means that if no `base` argument is specified by default `exp(1)` is used as base (i.e. the natural logarithm is computed). It is quite common for functions to have one or a few required arguments and many optional arguments for which a default value may be pre-specified if you do not explicitly state a different one.

Until now, we have printed the value of a variable by simply typing its name. However, we can also use the `print()` function to print the value of a variable. For example, to print the value of `lnGDP` we can type:

```{r}
print(lnGDP)
```

The `print()` function allows us to do more complicated things, for example to print a message along with the value of a variable. Let's say that we want to print the message "The natural logarithm of GDP is:" followed by the value of `lnGDP`, so that the user can better understand what the value refers to, we can type:

```{r}
print(paste("The natural logarithm of GDP is:", lnGDP))
```

`paste` is another built-in function that allows us to concatenate *strings* of text. In the example above we first concatenated the string *"The natural logarithm of GDP is:"* with the value of the variable `lnGDP` to create a single string. Then, the function `print()` printed this concatenated string in the console.

::: callout-note
## Single and double quotes

Differently from other programming languages, in R you can use either single quotes `'` or double quotes `"` interchangeably to define a string of text. In other words `print("Hello")` and `print('Hello')` are equivalent.

The R documentation suggests that double quotes are preferred over single quotes, some programmers prefer to use double quotes for character strings and single quotes for other purposes, and can feel quite strongly about these rules. Ultimately, however, this is a matter of personal style and you can choose the one you prefer.

No matter your choice, it is important to be consistent in your use of single and double quotes throughout your code, as consistency in style improves readability and intelligibility of your work.
:::

### if statements

If statements are use to execute some code only if a certain condition is met. The syntax of the if statement is `if (condition) { code to be executed }`.

Imagine that we are interested in printing to the console the value of `lnGDP` only if it is greater than 10. We can use an if statement to do this:

```{r}
if (lnGDP > 10) {
  print(paste("The natural logarithm of GDP is larger than 10, and more precisely it is:", lnGDP))
}
```

We can also add an `else` statement to execute some code if the condition is **not** met. The syntax of the if-else statement is then `if (condition) { code to be executed if the condition is met } else { code to be executed if the condition is not met }`. To test how this works, let's change the value of `lnGDP` to 9 and run the following code:

```{r}
lnGDP <- 9

if (lnGDP > 10) {
  print(paste("The natural logarithm of GDP is larger than 10, and more precisely it is:", lnGDP))
} else {
  print(paste("The natural logarithm of GDP is not larger than 10, and more precisely it is:", lnGDP))
}
```

### Loops

In economics, we often want to solve a model by iterating over a set of equations. For example, consider the following simple Keynesian model:

$$Y = C+I$$ and $$C = \delta_{0} + \delta_{1} \times Y$$ 
We will need to define the exogenous parameters $\delta_{0}$, $\delta_{1}$, and $I$, as well as an initial values for the endogenous variable $C$. Then, we can use a loop to solve the model iterating over the equations until the endogenous variable converges to a stable value.

```{r}
# Define exogenous parameters
delta <- 5
delta_1 <- 0.75
I <-  10

# Set an initial values for the endogenous variable C
C <- 1

# Use a for loop to solve the model

for (i in 1:60){
  Y <- C + I
  C <- delta + delta_1*Y
  cat("Iteration", i, ":", "Y =", Y, "C =", C, "\n")
  }
```

Note that we used the `cat()` function to print the results of each iteration in the console. The `cat()` function is similar to the `print()` function, but it is useful when you want to print several things in the same line. Here, at each iteration of the for loop we printed the string `"Iteration"`, the value of the variable `i`, the string `":"`, the string `"Y ="` the value of `Y`, the string `"C ="`, and the value of `C`, followed by the string `\n` instructing `R` to move to a new line.

In the previous example we printed the result of each iteration to the console; this was useful to observe what the loop was doing and to check if the endogenous variable was converging to a stable value. However, in many cases you might only be interested in obtaining the final results.

We ca easily achieve this moving the `cat()` function outside the loop, so that it is executed only once, after the loop has finished.  For example, we can modify the previous code as follows:

```{r}
# Define exogenous parameters
delta <- 5
delta_1 <- 0.75
I <-  10

# Set an initial values for the endogenous variable C
C <- 1

# Use a for loop to solve the model

for (i in 1:60){
  Y <- C + I
  C <- delta + delta_1*Y
}

cat("Final results: \n", "Y =", Y, "C =", C, "\n")

```

```{r}

########################### Data structures ##########################
#In most applications we produce outputs which do not consist of a single number.
#Often we have an entire stream of results, or we want to analyse data and have to store larger amounts of data
#R has a variety of data structures for this purpose.
#let's clean up first
rm(list=ls(all=TRUE))

####Vectors 
#We can create an empty vector and fill it later (with results of our model for example)
vec1 = vector(length=3)
#we can define vectors explicitly using the c() function (c for column?)
vec2 = c(1,2,3)
vec3 = c(6,7,8)
#we can also use the sequence operator
vec4 = 1:10
#and we can define the step size
vec5 = seq(1,2,0.1)
vec5
#we can call specific entries using square brackets
vec5[4]
#if we want to access more elements at once
vec5[c(4,1)]

####Matrices
#define a matrix: 3 rows and 2 columns, all elements equal to 0
mat1 = matrix(0, nrow=3, ncol=2)
mat1
#we can also fill it with specific values
mat2 = matrix(c(1,2,3,4,5,6), nrow = 3, ncol = 2)
mat2
#access specific elements (columns,rows)
mat2[3,1]
#access entire rows or columns
mat2[,1]
mat2[1,]
#access sub matrices
mat2[c(1,2),]
## Combine two column vectors in a matrix
mat3=cbind(vec1, vec2)
mat3
## Combine two row vectors in a matrix
mat4=rbind(vec1, vec2)
mat4
```
