---
title: "Getting Started"
author: "Andrea Golfari"
format: 
    html:
        theme:
            dark: darkly
editor: visual
---

## R Basics

### R as a calculator

The most basic use of R is a calculator. You can input formulas in the `console` tab of RStudio and execute them by pressing `Enter`. The consele is an interactive environment where you can input your code and have the results displayed.

For example, try typing `2+2` and pressing `Enter`. You should see the result `4` printed in the console.

```{r}
2+2
```

The usual arithmetic operators are available in R:

-   `+` for addition
-   `-` for subtraction
-   `*` for multiplication
-   `/` for division
-   `^` for exponentiation
-   `%%` for modulo (remainder of division).

Of course, you can also use parentheses to group operations...

```{r}
2*(100/4)+(2^3)
```

...or

```{r}
2*100/((4+2)^3)
```
Note that we did not use`[]` or `{}` to group operations like you (maybe) would with pen and paper. In R, parentheses `()` are used to group operations while `[]` and `{}` are use for other various different things.

You can also assign values to variables and use them later in your calculations. In R we use the *assignment operator* `<-` to assign values to variables. For example, typing `x <- 2` creates a variable `x` and assigns a value of 2 and pressing `Enter`. You should see nothing printed in the console; however, in the `Environment` tab of RStudio you should see the variable `x` has been created and now carries the value of 2.

```{r}
x <- 2
```

You can confirm this by typing `x` in the console and pressing `Enter`. You should see the value of `x` printed in the console.

```{r}
x
```

### Working with R scripts

While working in the console is great for performing quick calculations and testing out code, in general you will want to save your code in a file to be able to execute it again later, revise it and/or extend it. For this purpose, we use R scripts. An R script is simply a text file containing R code, and you can create a new R script by clicking on the `File` menu and selecting `New File` and then `R Script`. Alternatively, you can use the keyboard shortcut `Ctrl + Shift + N` on a Windows computer or `Cmd + Shift + N` on a Mac.

As you see you now have an `untitled.R` file open in a pane of RStudio, and you can now type your code in it and execute it (line by line or selecting a chunk) by pressing `Ctrl + Enter` on a Windows computer or `Cmd + Enter` on a Mac.

Note that you can also execute the entire script by clicking on the `Source` button in the top right corner of the script pane. This will execute the entire script, line by line, and print the results in the console. In the `File` menu you will find the usual options to save or rename your R script.

::: callout-tip
## Comments `#`

In R every line that starts with a `#` is a **comment** and is not executed. Comments are useful to explain what your code does and make it more readable. It is very good practice to comment your code, either to make it more accessible to other users or to remind your future self what you were doing.

You can also "comment out" a line of code when you want to test something without deleting the original code. To do this, simply add a `#` at the beginning of the line of code you want to comment out. This way, the line will not be executed, but it will still be there for you to use later.
:::

You can copy these *snippets* of code into your R script and execute them line by line to see what happens. Try to change the values of the variables and see what happens.

Consider the usual identity for Gross Domestic Product (GDP):

$$GDP=C+I+G+NX$$ where $$NX=EX-IM$$ We can now use R to calculate GDP for different values of consumption, investment, government spending, exports and imports.

```{r}
#########################   YOUR FIRST R SCRIPT  #############################
# Note: lines start with a # are not executed
# Also, any part of a line following a # is not executed

# Defining known variables
C <- 18888.1   # Consumption
I <- 4975.0    # Investment
G <- 4856.8    # Government spending
EX <- 3054.0   # Exports
IM <- 3835.1   # Imports

# Calculating GDP
GDP <- C + I + G + (EX - IM)
GDP
```

We can similarly compute Net Exports (NX) and save the value to a newly created variable:

```{r}
NX <- EX - IM
NX
```

### Built-in functions

In economics, we often want to convert a variable to its natural logarithm. Even before installing any additional package, base R has many built-in mathematical functions, including the natural logarithm is computed using the `log()` function. For example, to compute the natural logarithm of GDP and assign the value to a new variable `lnGDP` we can type:

```{r}
lnGDP <- log(GDP)
lnGDP
```

Among the many useful functions built-in base R we have:

-   `max` and `min`, to find the maximum and minimum of a set of numbers
-   `exp()`, the exponential function
-   `sqrt()`, the square root
-   `abs()`, the absolute value
-   `log10()` and `log2()`, respectively the logarithm to base 10 and 2
-   `cos()`, `sin()`, `tan()`, `acos()`, `asin()`, `atan()`, the trigonometric functions and their inverses

Sometimes you might not remember the arguments that a function requires, or some detail about its mechanics. In such cases you can type (in the console or in a script) `help(function_name)` or `?function_name` and press `Enter`. This will open the help page for the function in the `Help` tab of RStudio, which will include a description of the function, its arguments, references and some practical examples of usage.

For example, we you can type `?log` and press `Enter` to see the help page for the `log()` function.

```{r}
?log
```

As you can see in the `Usage` section of the help page, `log()` takes two arguments: `x` and `base`. The `x` argument is the number for which you want to compute the logarithm, and the `base` argument is the base of the logarithm. The expression `base = exp(1)` means that if no `base` argument is specified by default `exp(1)` is used as base (i.e. the natural logarithm is computed). It is quite common for functions to have one or a few required arguments and many optional arguments for which a default value may be pre-specified if you do not explicitly state a different one.

Until now, we have printed the value of a variable by simply typing its name. However, we can also use the `print()` function to print the value of a variable. For example, to print the value of `lnGDP` we can type:

```{r}
print(lnGDP)
```

The `print()` function allows us to do more complicated things, for example to print a message along with the value of a variable. Let's say that we want to print the message "The natural logarithm of GDP is:" followed by the value of `lnGDP`, so that the user can better understand what the value refers to, we can type:

```{r}
print(paste("The natural logarithm of GDP is:", lnGDP))
```

`paste` is another built-in function that allows us to concatenate *strings* of text. In the example above we first concatenated the string *"The natural logarithm of GDP is:"* with the value of the variable `lnGDP` to create a single string. Then, the function `print()` printed this concatenated string in the console.

::: callout-note
## Single and double quotes

Differently from other programming languages, in R you can use either single quotes `'` or double quotes `"` interchangeably to define a string of text. In other words `print("Hello")` and `print('Hello')` are equivalent.

The R documentation suggests that double quotes are preferred over single quotes, some programmers prefer to use double quotes for character strings and single quotes for other purposes, and can feel quite strongly about these rules. Ultimately, however, this is a matter of personal style and you can choose the one you prefer.

No matter your choice, it is important to be consistent in your use of single and double quotes throughout your code, as consistency in style improves readability and intelligibility of your work.
:::

## Packages and the tidyverse

As previously mentioned, R has a tremendously vast ecosystem of packages that can be used to perform a wide range of tasks. Each package gives access to a set of specific functions that extend the functionality of what we call base R. We will sometimes rely on some packages to do things like access public databases, manipulate this data, visualize it, or perform specific statistical analyses or model simulations.

It all sounds quite daunting, but it *really* is not. The process of installing and loading a package is very simple. You only need to install each package once. After that, you can load it every time you start a new R session. 

To install a package you can use the `install.packages()` function, and put inside the parentheses the name of the package you want to install **with quotes**. The `install.packages()` function will download the package from the CRAN repository and install it on your computer. You only need to do this once for each package,as long as you continue working on the same computer.

One of the most popular and powerful packages is the `tidyverse`, which is in truth a collection of packages designed to work together. The tidyverse introduced in the R world a specific, consistent and coherent way of working with data, based on the principles of tidy data and the grammar of graphics. To most people the syntax of the tidyverse is more intuitive and easier to learn than base R, and we will use the `tidyverse` package quite routinely in this course. So it is a good idea to install it now.

To install the `tidyverse` package you can type `install.packages("tidyverse")`. Let's see what happens!

```{r}
# Note: commented out to avoid re-installing it
# install.packages("tidyverse")
```

Wow, that was a lot. If you read the console output, you'll see that R has been downloading and installing not only the packages included in the tidyverse, but also its *dependencies*. Dependencies are other packages that are required for the package you are installing to work properly. R took care of checking which of these dependencies were missing from your system and installed them as well. Neat!

If you check your `Packages` tab in RStudio, you will see that the `tidyverse` package is now included in the list, because it has been installed. However, to use the functions included in the `tidyverse` package you need to load it into your current R session. You can do this using the `library()` function, and putting the name of the package you want to load inside the parentheses **without quotes**. 

Let's load the `tidyverse` package now.

```{r}
library(tidyverse)
```
R will give you information about the versions of the packages that were loaded (which in case of `tidyverse` is quite a few).

If you check the `Packages` tab in RStudio, you will see that the `tidyverse` package is now loaded, as indicated by the checkmark next to its name. It is a good idea to put the loading of the packages that we know we will want to use at the top of a script, so that anybody running the code (including our future selves) knows which packages are required.

::: callout-note
Conflicts are nothing too alarming, what R is telling you is that there are functions with the same name in different packages, and that you should be careful when using them. For example, above you care read that the `filter()` function is included in both the `dplyr` package (part of the `tidyverse`) and the `stats` package (part of base R). Since you have loaded the `tidyverse` package after the `stats` package, the `filter()` function from `dplyr` will mask the `filter()` function from `stats`. This is not a problem, but you should be aware of it.

Most R programmers will tell you that the most correct way to handle this situation is to use the `::` operator to specify from which package you want to use a function. For example, to use the `filter()` function from the `dplyr` package you can type `dplyr::filter()`. This way you are explicitly telling R that you want to use the `filter()` function from the `dplyr` package. When instead you desire to use the `filter()` function from the `stats` package you will type `stats::filter()`, thus resolving the ambiguity.

But, since most programmers (including me) are lazy, don't be surprised if you read (most) code that doesn't use the `::` operator. It is not a big deal as long as you are fairly certain that the one version of the function that you will routinely access if actually the one *masking* the alternative *being masked*.
:::

## Managing the Environment

At this point the `Environment` tab of your RStudio is probably littered with variables that you have created during the course of this lesson. This is not a problem, but it can become confusing if you have many variables with similar names or if you are working on a long script.

You can remove a variable from the environment using the `rm()` function. For example, to remove the variable `lnGDP` you can type:

```{r}
rm(lnGDP)
```

If you check the `Environment` tab in RStudio you will see that the variable `lnGDP` is no longer listed. You can also remove multiple variables at once:

```{r}
rm(GDP, x, G)
```

Sometimes we really want to clean up things and remove all the variables from the environment to start over. 
You can do this using the `rm(list = ls())` command. Right now this syntax will probably look obscure. That's fine! You do not really need to understand the detals now, but if you are curious, the `ls()` function lists all the variables in the environment, and the `list =` argument of the `rm()` function tells R to remove all the variables listed by `ls()`.

Let's try it now:

```{r}
rm(list = ls())
```

And... it's all gone! The `Environment` tab is now empty. When you are testing code or writing a script, it is a good idea to start with a clean environment, so that you can be sure that the results you are getting are not influenced by variables that you have created in previous runs. This is particularly important when you are attempting many different things and sometimes overwrite variables with the same name. It's easy to get confused and pretty soon unexpected results show up and they are hard to debug.

Now you should spend a few minutes checking all the code you wrote, writing comments so that you can understand what it does when you go back to it, and then save it as a `.R` script. You can save the script by clicking on the `File` menu and selecting `Save As...`. Give your script a name and save it in a folder where you can easily find it.